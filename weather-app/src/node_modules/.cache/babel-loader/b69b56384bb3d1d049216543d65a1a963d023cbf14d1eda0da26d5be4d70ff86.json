{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lydia\\\\Documents\\\\GitHub\\\\Weather-App-SoloProject\\\\weather-app\\\\src\\\\components\\\\MainPage.jsx\";\nimport React from \"react\";\nimport { Button, Container } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass MainPage extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      isLoading: true,\n      isError: false,\n      cities: [],\n      input: \"\"\n    };\n  }\n  async getLocations(query) {\n    try {\n      const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${query}&APPID=3e93bd34cafe899e1166a35a9efa51fc&units=metric`);\n      if (response.ok) {\n        const data = await response.json();\n        console.log(data);\n        this.setState({\n          ...this.state,\n          cities: data\n        });\n        console.log(this.state);\n      } else {\n        alert(\"Error fetching results\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  componentDidMount() {\n    this.getLocations(\"Berlin\");\n  }\n  render() {\n    var _this$state$cities, _this$state$cities$ma, _this$state$cities2, _this$state$cities2$w;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        id: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: this.state.input,\n          onChange: e => {\n            this.setState({\n              ...this.state,\n              input: e.target.value\n            });\n          },\n          placeholder: \"Enter location...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          id: \"searchbutton\",\n          onClick: () => {\n            this.getLocations(this.state.input);\n          },\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Current Weather\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flexweather\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              id: \"h1\",\n              children: [Math.round((_this$state$cities = this.state.cities) === null || _this$state$cities === void 0 ? void 0 : (_this$state$cities$ma = _this$state$cities.main) === null || _this$state$cities$ma === void 0 ? void 0 : _this$state$cities$ma.temp), \"C\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 15\n            }, this), \" \", (_this$state$cities2 = this.state.cities) === null || _this$state$cities2 === void 0 ? void 0 : (_this$state$cities2$w = _this$state$cities2.weather) === null || _this$state$cities2$w === void 0 ? void 0 : _this$state$cities2$w.map(weather => /*#__PURE__*/_jsxDEV(\"img\", {\n              id: \"weatherlogo\",\n              attribute: true,\n              title: weather.description,\n              src: `http://openweathermap.org/img/wn/${weather.icon}@2x.png`,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            id: \"city\",\n            children: this.state.cities.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\"Local Time: \", new Date().setTime(new Date().getUTCHours() + this.state.timezone / 60 / 60), \" \", \": \", new Date().getMinutes(), \" UTC: \", this.state.timezone / 60 / 60]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n}\nexport default MainPage;","map":{"version":3,"names":["React","Button","Container","MainPage","Component","state","isLoading","isError","cities","input","getLocations","query","response","fetch","ok","data","json","console","log","setState","alert","error","componentDidMount","render","e","target","value","Math","round","main","temp","weather","map","description","icon","name","Date","setTime","getUTCHours","timezone","getMinutes"],"sources":["C:/Users/lydia/Documents/GitHub/Weather-App-SoloProject/weather-app/src/components/MainPage.jsx"],"sourcesContent":["import React from \"react\";\nimport { Button, Container } from \"react-bootstrap\";\n\n\n\nclass MainPage extends React.Component {\n  state = {\n    isLoading: true,\n    isError: false,\n    cities: [],\n    input: \"\",\n  };\n\n  async getLocations(query) {\n    try {\n      const response = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${query}&APPID=3e93bd34cafe899e1166a35a9efa51fc&units=metric`\n      );\n      if (response.ok) {\n        const data = await response.json();\n        console.log(data);\n        this.setState({ ...this.state, cities: data });\n        console.log(this.state);\n      } else {\n        alert(\"Error fetching results\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  componentDidMount() {\n    this.getLocations(\"Berlin\");\n  }\n\n  render() {\n    return (\n      <>\n        <Container id=\"container\">\n          \n          <input\n            type=\"text\"\n            value={this.state.input}\n            onChange={(e) => {\n              this.setState({ ...this.state, input: e.target.value });\n            }}\n            placeholder=\"Enter location...\"\n          />\n          <Button\n            id=\"searchbutton\"\n            onClick={() => {\n              this.getLocations(this.state.input);\n            }}\n          >\n            Search\n          </Button>\n          \n          <h2>Current Weather</h2>\n\n          <div>\n            <div className=\"flexweather\">\n              <h1 id=\"h1\">{Math.round(this.state.cities?.main?.temp)}C</h1>{\" \"}\n              {this.state.cities?.weather?.map((weather) => (\n                <img\n                  id=\"weatherlogo\"\n                  attribute\n                  title={weather.description}\n                  src={`http://openweathermap.org/img/wn/${weather.icon}@2x.png`}\n                  alt=\"\"\n                ></img>\n              ))}\n            </div>\n            <p id=\"city\">{this.state.cities.name}</p>\n            <h4>\n                {\"Local Time: \"}\n                {new Date().setTime(\n                  new Date().getUTCHours() + this.state.timezone / 60 / 60\n                )}{\" \"}\n                : {new Date().getMinutes()} UTC: {this.state.timezone / 60 / 60}\n              </h4>\n    \n          \n    \n\n            \n           \n          </div>\n\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default MainPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}