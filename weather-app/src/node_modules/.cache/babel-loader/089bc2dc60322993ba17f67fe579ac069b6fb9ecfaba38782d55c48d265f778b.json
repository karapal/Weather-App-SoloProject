{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lydia\\\\Documents\\\\GitHub\\\\Weather-App-SoloProject\\\\weather-app\\\\src\\\\components\\\\WeatherSearch.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { Container, Form, Jumbotron } from \"react-bootstrap\";\nimport DisplayArea from \"./DisplayArea\";\n// import WeeklyForeCast from \"./WeeklyForecast\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst WeatherSearch = () => {\n  _s();\n  const [weatherData, setWeatherData] = useState([]);\n  const [locationArea, setLocationArea] = useState(\"\");\n  const [isloading, setIsLoading] = useState(true);\n  const basepoint = `https://api.openweathermap.org/data/2.5/weather?q=`;\n  const apiKey = \",&APPID=6af993cceb0d29ae03dc006dafe28c01\";\n  const handleChange = e => {\n    setLocationArea(e.target.value);\n  };\n  const fetchWeather = async e => {\n    e.preventDefault();\n    try {\n      let response = await fetch(basepoint + locationArea + apiKey + \"&units=metric\", {\n        method: \"GET\"\n      });\n      if (response.ok) {\n        const rawWeatherData = await response.json();\n        console.log(rawWeatherData);\n        setWeatherData(rawWeatherData);\n        setIsLoading(false);\n      } else {\n        console.log(\"Error!!!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  fetchWeather();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Jumbotron, {\n      className: \"mainLanding\",\n      fluid: true,\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"searchBar mb-5\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"title-app mb-3\",\n            children: \"Weather App\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form, {\n            onSubmit: fetchWeather,\n            children: /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"search\",\n              value: locationArea,\n              placeholder: \"Please enter city and press Enter~\",\n              onChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), isloading ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : /*#__PURE__*/_jsxDEV(DisplayArea, {\n          info: weatherData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 32\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(WeatherSearch, \"13GP+vS0G0VtZ5hd6Ezp2l37GHU=\");\n_c = WeatherSearch;\nexport default WeatherSearch;\nvar _c;\n$RefreshReg$(_c, \"WeatherSearch\");","map":{"version":3,"names":["useState","Container","Form","Jumbotron","DisplayArea","WeatherSearch","weatherData","setWeatherData","locationArea","setLocationArea","isloading","setIsLoading","basepoint","apiKey","handleChange","e","target","value","fetchWeather","preventDefault","response","fetch","method","ok","rawWeatherData","json","console","log","error"],"sources":["C:/Users/lydia/Documents/GitHub/Weather-App-SoloProject/weather-app/src/components/WeatherSearch.jsx"],"sourcesContent":["import { useState } from \"react\";\nimport { Container, Form, Jumbotron } from \"react-bootstrap\";\nimport DisplayArea from \"./DisplayArea\";\n// import WeeklyForeCast from \"./WeeklyForecast\";\n\nconst WeatherSearch = () => {\n  const [weatherData, setWeatherData] = useState([]);\n  const [locationArea, setLocationArea] = useState(\"\");\n  const [isloading, setIsLoading] = useState(true);\n\n  const basepoint = `https://api.openweathermap.org/data/2.5/weather?q=`;\n  const apiKey = \",&APPID=6af993cceb0d29ae03dc006dafe28c01\";\n\n  const handleChange = (e) => {\n    setLocationArea(e.target.value);\n  };\n\n  const fetchWeather = async (e) => {\n    e.preventDefault();\n\n    try {\n      let response = await fetch(\n        basepoint + locationArea + apiKey + \"&units=metric\",\n        {\n          method: \"GET\",\n        }\n      );\n\n      if (response.ok) {\n        const rawWeatherData = await response.json();\n        console.log(rawWeatherData);\n        setWeatherData(rawWeatherData);\n        setIsLoading(false);\n      } else {\n        console.log(\"Error!!!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  fetchWeather();\n\n  return (\n    <>\n      <Jumbotron className=\"mainLanding\" fluid>\n        <Container>\n          <div className=\"searchBar mb-5\">\n            <h1 className=\"title-app mb-3\">Weather App</h1>\n            <Form onSubmit={fetchWeather}>\n              <Form.Control\n                type=\"search\"\n                value={locationArea}\n                placeholder=\"Please enter city and press Enter~\"\n                onChange={handleChange}\n              />\n            </Form>\n          </div>\n          {isloading ? <></> : <DisplayArea info={weatherData} />}\n          {/* {loading ? <></> : <WeeklyForeCast week={weatherData.coord} />} */}\n        </Container>\n      </Jumbotron>\n    </>\n  );\n};\n\nexport default WeatherSearch;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,SAAS,EAAEC,IAAI,EAAEC,SAAS,QAAQ,iBAAiB;AAC5D,OAAOC,WAAW,MAAM,eAAe;AACvC;AAAA;AAAA;AAEA,MAAMC,aAAa,GAAG,MAAM;EAAA;EAC1B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAEhD,MAAMY,SAAS,GAAI,oDAAmD;EACtE,MAAMC,MAAM,GAAG,0CAA0C;EAEzD,MAAMC,YAAY,GAAIC,CAAC,IAAK;IAC1BN,eAAe,CAACM,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EACjC,CAAC;EAED,MAAMC,YAAY,GAAG,MAAOH,CAAC,IAAK;IAChCA,CAAC,CAACI,cAAc,EAAE;IAElB,IAAI;MACF,IAAIC,QAAQ,GAAG,MAAMC,KAAK,CACxBT,SAAS,GAAGJ,YAAY,GAAGK,MAAM,GAAG,eAAe,EACnD;QACES,MAAM,EAAE;MACV,CAAC,CACF;MAED,IAAIF,QAAQ,CAACG,EAAE,EAAE;QACf,MAAMC,cAAc,GAAG,MAAMJ,QAAQ,CAACK,IAAI,EAAE;QAC5CC,OAAO,CAACC,GAAG,CAACH,cAAc,CAAC;QAC3BjB,cAAc,CAACiB,cAAc,CAAC;QAC9Bb,YAAY,CAAC,KAAK,CAAC;MACrB,CAAC,MAAM;QACLe,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;MACzB;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdF,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;IACpB;EACF,CAAC;EAEDV,YAAY,EAAE;EAEd,oBACE;IAAA,uBACE,QAAC,SAAS;MAAC,SAAS,EAAC,aAAa;MAAC,KAAK;MAAA,uBACtC,QAAC,SAAS;QAAA,wBACR;UAAK,SAAS,EAAC,gBAAgB;UAAA,wBAC7B;YAAI,SAAS,EAAC,gBAAgB;YAAA,UAAC;UAAW;YAAA;YAAA;YAAA;UAAA,QAAK,eAC/C,QAAC,IAAI;YAAC,QAAQ,EAAEA,YAAa;YAAA,uBAC3B,QAAC,IAAI,CAAC,OAAO;cACX,IAAI,EAAC,QAAQ;cACb,KAAK,EAAEV,YAAa;cACpB,WAAW,EAAC,oCAAoC;cAChD,QAAQ,EAAEM;YAAa;cAAA;cAAA;cAAA;YAAA;UACvB;YAAA;YAAA;YAAA;UAAA,QACG;QAAA;UAAA;UAAA;UAAA;QAAA,QACH,EACLJ,SAAS,gBAAG,qCAAK,gBAAG,QAAC,WAAW;UAAC,IAAI,EAAEJ;QAAY;UAAA;UAAA;UAAA;QAAA,QAAG;MAAA;QAAA;QAAA;QAAA;MAAA;IAE7C;MAAA;MAAA;MAAA;IAAA;EACF,iBACX;AAEP,CAAC;AAAC,GA3DID,aAAa;AAAA,KAAbA,aAAa;AA6DnB,eAAeA,aAAa;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}